{"version":3,"sources":["Components/UI/Tabs/ColorTabs.js","App.js","reportWebVitals.js","index.js"],"names":["ColorTabs","navigate","useNavigate","React","value","setValue","Box","className","Tabs","onChange","event","newValue","textColor","indicatorColor","Tab","label","LazyVehicles","lazy","LazyCharging","App","fallback","path","exact","element","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gSAMe,SAASA,IACpB,IAAIC,EAAWC,cAEf,EAA0BC,WAAe,KAAzC,mBAAOC,EAAP,KAAcC,EAAd,KAOA,OACI,cAACC,EAAA,EAAD,CAAKC,UAAW,iBAAhB,SACI,eAACC,EAAA,EAAD,CACIJ,MAAOA,EACPK,SATS,SAACC,EAAOC,GACzBN,EAASM,GACTV,EAAS,GAAD,OAAIU,KAQJC,UAAU,YACVC,eAAe,YACf,aAAW,yBALf,UAOI,cAACC,EAAA,EAAD,CAAKV,MAAM,IAAIW,MAAM,SACrB,cAACD,EAAA,EAAD,CAAKV,MAAM,YAAYW,MAAM,aAC7B,cAACD,EAAA,EAAD,CAAKV,MAAM,YAAYW,MAAM,kBCpB7C,IAAMC,EAAeC,gBAAK,kBAAM,gCAC1BC,EAAeD,gBAAK,kBAAM,gCAgBjBE,EAdH,WACR,OACI,cAAC,IAAD,UACI,eAAC,WAAD,CAAUC,SAAU,aAApB,UACI,cAACpB,EAAD,CAAWO,UAAU,mBACrB,eAAC,IAAD,WACI,cAAC,IAAD,CAAOc,KAAK,YAAYC,OAAK,EAACC,QAAS,cAACP,EAAD,MACvC,cAAC,IAAD,CAAOK,KAAK,YAAYC,OAAK,EAACC,QAAS,cAACL,EAAD,eCL5CM,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.82e82100.chunk.js","sourcesContent":["import * as React from 'react';\nimport Tabs from '@mui/material/Tabs';\nimport Tab from '@mui/material/Tab';\nimport Box from '@mui/material/Box';\nimport {useNavigate} from \"react-router-dom\";\n\nexport default function ColorTabs() {\n    let navigate = useNavigate();\n\n    const [value, setValue] = React.useState('/');\n\n    const handleChange = (event, newValue) => {\n        setValue(newValue);\n        navigate(`${newValue}`)\n    };\n\n    return (\n        <Box className={'color-tabs-box'}>\n            <Tabs\n                value={value}\n                onChange={handleChange}\n                textColor=\"secondary\"\n                indicatorColor=\"secondary\"\n                aria-label=\"secondary tabs example\"\n            >\n                <Tab value=\"/\" label=\"Home\" />\n                <Tab value=\"/vehicles\" label=\"Vehicles\" />\n                <Tab value=\"/charging\" label=\"Charging\" />\n            </Tabs>\n        </Box>\n    );\n}","import React, {Suspense, lazy} from 'react';\nimport {BrowserRouter as Router, Route, Routes} from 'react-router-dom';\n\nimport './App.css';\nimport ColorTabs from \"./Components/UI/Tabs/ColorTabs\";\n\n\nconst LazyVehicles = lazy(() => import('./Components/core/Vehicles/Vehicles'))\nconst LazyCharging = lazy(() => import('./Components/core/Charging/Charging'))\n\nconst App = () => {\n    return (\n        <Router>\n            <Suspense fallback={'Loading...'}>\n                <ColorTabs className=\"color-tabs-box\"/>\n                <Routes>\n                    <Route path=\"/vehicles\" exact element={<LazyVehicles />} />\n                    <Route path=\"/charging\" exact element={<LazyCharging />} />\n                </Routes>\n            </Suspense>\n        </Router>\n    );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}